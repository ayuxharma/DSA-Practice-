//L47

#include <map>


bool detectLoop (node* head) {

    if (head == NULL){
        return false ;
    }

    map<node* , bool> visited ;

    node* temp = head ;

    while (temp != NULL){
        
        //cycle is present
        if(visited[temp] == true) {
            return true ;
        }

        visited[temp] = true ;
        temp = temp->next ;
    }

    return false ;
}


//FLOYD'S CYCLE DETECTION ALGO

node* floydDetectLoop (node* head){

    if (head==NULL){
        return NULL ;
    }

    node* slow = head ;
    node* fast = head ;

    while(slow != NULL  && fast != NULL){

        fast = fast->next ;
        if(fast!=NULL){
            fast = fast->next ;
        }

        slow = slow->next ;

        if (slow==fast){
            cout << "present at " << slow->data << endl;
            return true ;
        }

        else {
            return false ;
        }
    }
}


if (floydDetectLoop(head) != NULL){
    cout << "cycle is present " << endl;
}
else {
    cout << "no cycle " << endl;
}





node* getStartingNode (node* head){

    if (head == NULL){
        return NULL ;
    }

    node* intersection = floydDetectionLoop(head) ;
    node* slow = head ;

    while (slow != intersection){

        slow = slow->next ;
        intersection = intersection -> next ;
    }

    return slow ;
}

node* loop = getStartingNode(head)-> data ;
cout << "starting at " <<  loop-> data << endl ;







void removeloop (node* head){

    if (head == NULL){
        return ;
    }

    node* startofloop = getStartingNode(head) ;

    node* temp = startofloop ;

    while (temp->next != startofloop){
        temp = temp->next ;
    }
    
    temp->next = NULL ;
}


//int main () vala maal :)
removeloop(head);
print(head);