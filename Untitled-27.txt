//L12 (BINARY SEARCH)

#include <iostream>
using namespace std ;

int binarySearch (int arr[] , int size , int key) {
    int start = 0 ;
    int end = size-1 ;

    int mid = start + (end-start)/2;

    while (start <= end) {

        if (arr[mid]==key) {
            return mid ;
        }
        if (key > arr[mid]) {
            //right jaana h 
            start = mid + 1 ;
            // agar left jaana h toh end = mid 1 
        }
        else { // key << arr[mid]  left chalo
            end = mid - 1 ;
        }
        
        mid = start + (end-start)/2 ;
    }

    return -1 ;

}


int main () {

    int even[6]= {2,4,6,8,12,18} ;
    int odd[5] = {3,8,11,14,16} ;

    int evenIndex = binarySearch (even , 6 , 8) ;
    cout << " Index of 8 is " << evenIndex << endl ;

    int oddIndex = binarySearch (odd , 5 , 11) ;
    cout << " Index of 11 is " << oddIndex ;

    return 0 ;
}


//important catch
/* max limit of integer is 2^31 - 1 
but if start + end > 2^31 - 1 , we will get a glitch
so instead of (start+end)/2 , we write start + (end-start)/2
*/


// TIME COMPLEXITY OF BINARY SEARCH = O(log n)