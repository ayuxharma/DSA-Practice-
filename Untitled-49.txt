//L44
//(LINKED LIST)

/* #include <iostream>
using namespace std ;

class node {
    public:
    int data ;
    node* next ;

    //constructor
    node (int data) {
        this -> data = data ;
        this -> next = NULL;
    }

    //destructor
    ~node() {
        int value = this -> data ;
        //memory free
        if (this->next != NULL) {
            delete next ;
            this->next = NULL ;
        } 
        cout << "memory is free for node with data " << value << endl;
    }
};

//INSERTION
void insertathead (node* &head , int d) {

    //new node create
    node* temp = new node(d) ;
    temp -> next = head ;
    head = temp ;
}

void insertattail (node* &tail , int d){
    //new node create
    node* temp = new node(d) ;
    tail -> next = temp ;
    tail = temp ;
}

void insertatposition (node* &tail , node* &head , int position , int d) {
    // n position pr jaana h toh n-1 tk traverse krte h 
    
    if (position==1){
        insertathead (head , d) ;
        return ;
    }

    node* temp = head ;
    int cnt = 1 ;

    while (cnt < position-1){
        temp = temp -> next ;
        cnt++ ;
    }

    //inserting at last position
    if (temp -> next == NULL){
        insertattail(tail , d) ;
        return ;
    }

    //creating a node for d 
    node* nodetoinsert = new node(d) ;

    nodetoinsert -> next = temp -> next ;
    
    temp -> next = nodetoinsert ;
}

void print (node* &head) {
    //ek temp bnakr sabko baari baari point kr k value print kro
    node* temp = head ;

    while (temp != NULL){
        cout << temp -> data << " " ;
        temp = temp -> next ;
    }
    cout << endl;
}

void deletenode (int position , node* &head) {

    //deleting 1st node
    if(position==1){

        node* temp = head ;
        head = head -> next ;
        //memory free of 1st node
        temp -> next = NULL ;
        delete temp ;  
    }
    else {
        //deleting all others
        node* curr = head ;
        node* prev = NULL ;

        int cnt = 1 ;
        while(cnt < position) {
            prev = curr ;
            curr = curr -> next ;
            cnt++ ;
        }

        prev -> next = curr -> next ;
        curr -> next = NULL ;
        delete curr ;
    }
}

int main () {

    // created a new node
    node* node1 = new node(10) ;
    //cout << node1 -> data << endl;
   // cout << node1 -> next << endl;

    //head pointed to node1 
    node* head = node1 ;
    node* tail = node1 ;
    print(head) ;

   /* insertathead(head,12) ;

    print(head) ;

    insertathead (head,15) ;
    print(head) ;

    cout << endl;
*/ 
  /*  insertattail(tail , 12);
    print(head) ;

    insertattail(tail,15);
    print(head) ;


    insertatposition (tail , head , 3 , 22) ;
    print(head) ;

    cout << "head is at " << head -> data << endl;
    cout << "tail is at " << tail -> data << endl;

    deletenode (3,head) ;
    print(head) ;

    cout << "head is at " << head -> data << endl;
    cout << "tail is at " << tail -> data << endl;

    return 0 ;
} */


// DOUBLY LINKED LIST 
/* #include <iostream>
using namespace std ;

class node {
    public:
    int data ;
    node* prev ;
    node* next ;

    //constructor
    node(int d){
        this-> data = d ;
        this-> prev = NULL ;
        this-> next = NULL ;
    }

    ~node() {
        int value = this -> data ;
        if (next != NULL){
            delete next ;
            next = NULL ;
        }
        cout << "memory free for node with data " << value << endl;
    }
};

    void print (node* head){
        node * temp = head ;

        while (temp != NULL){
            cout << temp->data << " " ;
            temp = temp -> next ;
        }
        cout << endl;
    }

int getlength (node* head){
    
    int len = 0 ;
    node * temp = head ;

        while (temp != NULL){
            len++ ;
            temp = temp -> next ;
        }
        return len ;
}

void insertathead (node* &head , int d) {

    node* temp = new node(d) ;
    temp -> next = head ;
    head -> prev = temp ;
    head = temp ;
}

void insertattail (node* &tail , int d) {
    node* temp = new node(d) ;
    tail -> next = temp ;
    temp -> prev = tail ;
    tail = temp ;
}

void insertatposition (node* &tail , node* &head , int position , int d){

    //insert at start
    if (position==1){
        insertathead(head , d) ;
        return ;
    }

    node* temp = head ;
    int cnt = 1 ;

    while (cnt < position-1){
        temp = temp -> next ;
        cnt++ ;
    }

    //inserting at last position
    if (temp -> next == NULL){
        insertattail(tail , d) ;
        return ;
    }

    //creating a node for d 
    node* nodetoinsert = new node(d) ;

    nodetoinsert -> next = temp -> next ;
    temp -> next -> prev = nodetoinsert ;
    temp -> next = nodetoinsert ;
    nodetoinsert -> prev = temp ;
}

void deletenode (int position , node* &head) {

    //deleting 1st node
    if(position==1){
        node* temp = head ;
        temp -> next -> prev = NULL ; 
        head = temp -> next ;
        temp -> next = NULL ;
        delete temp ;
    }

    else {
        //deleting all others
        node* curr = head ;
        node* prev = NULL ;

        int cnt = 1 ;
        while(cnt < position) {
            prev = curr ;
            curr = curr -> next ;
            cnt++ ;
        }

        curr -> prev = NULL ;
        prev -> next = curr -> next ;
        curr -> next = NULL ;

        delete curr ;
    }
}


int main () {

    node* node1 = new node (10) ;
    node* head = node1 ;

    node* tail = node1 ;

    print(head) ;

    cout << getlength(head) << endl;

    insertathead(head , 11) ;
    print(head) ;

    insertathead(head , 13) ;
    print(head) ;

    cout << endl; 

    insertattail(tail, 25) ;
    print(head) ;

    insertatposition (tail , head , 3 , 100) ;
    print(head) ;

    deletenode (3 , head) ;
    print(head) ;

    return 0 ;
} */


//CIRCULAR LINKED LIST
#include <iostream>
using namespace std ;

class node {
    public:
    int data ;
    node* next ;

    //constructor
    node(int d){
        this -> data = d ;
        this -> next = NULL ; 
    }

    ~node () {
        int value = this -> data ;
        if (this -> next != NULL){
            delete next ;
            next = NULL ;
        }
        cout << "memory is free for node with data " << value << endl;
    }

};


// we do not use head in CLL , only tail is here.
void insertnode (node* &tail , int element , int d) {
     // assuming that the element is present in the list 

     //empty list
     if (tail==NULL){
        node* newnode = new node(d) ;
        tail = newnode ;
        newnode -> next = newnode ;
     }

     else { //non empty list
       
       node* curr = tail ;
        while (curr -> data != element) {
            curr = curr -> next ;
        }

        //element found , curr is representing element
        node* temp = new node (d) ;
        temp -> next = curr -> next ;
        curr -> next = temp ;
     }
}

void print(node* tail){

    node* temp = tail ;

    //empty LL
    if (tail == NULL){
        cout << "list is empty " << endl;
        return ;
    }

    while (tail-> next != temp){
        cout << tail->data << " " ;
        tail = tail->next ;
    }
    cout << endl ;
}


void deletenode (node* &tail , int value) {

    //empty list
    if (tail == NULL){
        cout << "list is empty " << endl;
        return ;
    }

else {
    // non empty
    //assuming that value is present in the linked list

    node* prev = tail ;
    node* curr = prev->next ;

    while(curr->data != value){
        prev = curr ;
        curr = curr->next ;
    }

    prev->next = curr->next ;

    // 1 node LL
    if (curr == prev){
        tail = NULL ;
    }

    // >=2 ki LL
    else(tail==curr) {
        tail = prev ;
    }
    curr->next = NULL ;
    delete curr ;
}

}

int main () {

    node* tail = NULL ;

    insertnode(tail,5,3) ;
    print(tail) ;

    insertnode (tail,3,5) ;
    print(tail) ;

    insertnode (tail,5,7);
    print(tail) ;

    insertnode (tail,7,9) ;
    print(tail) ;

    insertnode (tail , 9 , 11) ;
    print(tail) ;

    deletenode (tail , 5) ;
    print(tail) ;

    return 0 ;
}