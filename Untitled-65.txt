//L60

/* #include<iostream>
#include<queue>
using namespace std ;

int main () {

    //create a queue
    queue <int> q ;

    q.push(11) ;

    cout << "front of queue is " << q.front() << endl; 

    q.push(15) ;
    q.push(13) ;

    cout << "front of queue is " << q.front() << endl; 

    cout << "size of queue is " << q.size() << endl;

    q.pop() ;

    cout << "size of queue is " << q.size() << endl;

    if(q.empty()){
        cout << "empty " << endl;
    }
    else {
        cout << "not empty " << endl;
    }
}




class Queue {

    int *arr ;
    int front ;
    int rear ;
    int size ;

    public:
    queue() {
        size = 100001 ;
        arr = new int[size] ;
        front = 0 ;
        rear = 0 ;
    }

    bool isEmpty(){

        if (front == rear){
            return true ;
        }
        else {
            return false ;
        }
    }

    void enqueue (int data) {
        if (rear == size)
        cout << "Queue is full" << endl;
    
    else {
        arr[rear] = data ;
        rear++ ;
    }
    }

    int dequeue() {

        if (front == rear) {
            return -1 ;
        }
        else {
            int ans = arr[front] ;
            arr[front] = -1 ;
            front++ ;
            if(front == rear){
                front = 0 ;
                rear = 0 ;
            }
            return ans ;
        }
    }

    int front() {
        
        if (front==rear){
            return -1 ;
        }
        else {
           return arr[front] ;
        }
    }

};



//CIRCULAR QUEUE

class circularqueue {

    int* arr ;
    int front ;
    int rear ;
    int size ;

    public:
    //initialize data structure
    circularqueue (int n){
        size = n ;
        arr = new int(size) ;
        front = rear = 1 ;
    }

    
    bool enqueue (int value) {
        if ((front == 0 && rear == size-1)  ||  (rear ==(front-1)%(size-1))){
            cout << "queue is full " << endl;
            return false ;
        }
        else if (front== -1) // first element to push
        {
            front = rear = 0 ;
            arr[rear] = value ;
        }
        else if (rear==size-1 && front != 0){
            rear = 0 ;
            arr[rear] = value ;
        }
        else {
            rear++ ;
            arr[rear] = value ;
        }
        return true ;
    }



    int dequeue () {
        if (front == -1){
            cout << "Queue is empty " << endl;
            return -1 ;
        }
        int ans = arr[front] ;
        arr[front] = -1 ;
        if (front == rear)// single element is present
        {
            front = rear = -1 ;
        }
        else if (front == size-1) {
            front = 0 ; // to maintain cyclic nature
        }
        else {
            front++ ;
        }

        return ans ;
    }
}; */



//DOUBLY ENDED QUEUE

//STL
#include <iostream>
#include <queue>
using namespace std ;

int main () {

    deque <int> d ;
    
    d.push_front(12) ;
    d.push_back(14) ;
    cout << d.front() << endl;
    cout << d.back() << endl;

    d.pop_front() ;

    cout << d.front() << endl;
    cout << d.back() << endl;

    if(d.empty()){
        cout << "Queue is empty " << endl;
    }
    else {
        cout << "Queue is not empty " << endl;
    }
}


//IMPLEMENT 
class deque {
    int* arr ;
    int front ;
    int rear ;
    int size ;

    public:
    //initialize data structures
    deque(int n){
        size = n ;
        arr = new int[n] ;
        front = -1 ;
        rear = -1 ;
    }

    bool pushfront {
        //check full
        if (isfull()) {
            return false ;
        }
        else if (isempty()) {
            front = rear = 0 ;
        }
        else if (front == 0){
            front = n-1 
        }
        else {
            front-- ;
        }

        arr[front] = x ;
        return true ;
    }




    bool pushrear (int x) {
        if (isfull()){
            return false ;
        }
        else if (isempty()) // first element to push
        {
            front = rear = 0 ;
        }
        else if (rear == size-1  &&  front != 0){
            rear = 0 ; // to maintain cyclic order
        }
        else {
            //normal flow
            rear++ ;
        }
        arr[rear] = x ;
        return true ;
    }

    


    int popfront () 
    {
        if (isempty()){
            cout << "Queue is empty " << endl;
            return -1 ;
        }
        int ans = arr[front] ;
        arr[front] = -1 ;
        if (front == rear)// single element is present
        {
            front = rear = -1 ;
        }
        else if (front == size-1) {
            front = 0 ; // to maintain cyclic nature
        }
        else {
            front++ ;
        }

        return ans ;
    }




    int poprear () {
        if (front == -1){
            cout << "Queue is empty " << endl;
            return -1 ;
        }
        int ans = arr[rear] ;
        arr[rear] = -1 ;
        if (front == rear)// single element is present
        {
            front = rear = -1 ;
        }
        else if (rear == 0) {
            rear = size-1 ; // to maintain cyclic nature
        }
        else {
            rear-- ;
        }

        return ans ;
    }

    int getfront ()
    {
        if (isempty()){
            return -1 ;
        }
        return arr[rear] ;
    }




    bool isempty() {
        if (front == -1)
           return true ;

        else
           return false ;
    }




    bool isfull() {
        if ((front==0 && rear==size-1) || (front!=0 && rear==(front-1)%(size-1))){ 
            return true ;
        }
        else {
            return false ;
        }
    }
}