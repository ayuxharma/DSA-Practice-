//L45
#include<iostream>
using namespace std;

//Q1. code studio (reverse linked list) 

// iterative solution
// TC = 0(N) , SC = 0(1) 
class node { 
    public:
    int data ;
    node* next ;

    node(int data){
        this -> data = data ;
        this -> next = NULL ;
    }
};

node* reverselinkedlist (node* head) {

    if (head==0 || head->next==NULL){
        return head ;
    }

    node* prev = NULL ;
    node* curr = head ;

    while (curr != NULL){
        node* forward = NULL ;
        forward = curr->next ;
        curr->next = prev ;
        prev = curr ;
        curr = forward ;
    }
    return prev ;
}

//RECURSIVE APPROACH ( TC = O(N) = SC )
//sirf ek case solve kro baaki recursion kr lega

void reverse (node* &head , node* curr , node* prev) {

    //base case
    if (curr == NULL) {
        head = prev ;
        return ;
    }

    node* forward = curr->next ;
    reverse(head , forward , curr) ;
    curr -> next = prev ;
}



node* reverselinkedlist (node* head) {

    node* curr = head ;
    node* prev = NULL ;
    reverse(head , curr , prev) ;
    return head ;

}


//RECURSIVE SOLUTION - 2  ( TC = O(N) = SC )

node* reverse1 (node* head) {
    // yeh function reverse kr k head return krega tabhi chotahead likha h niche 


    //base case
    if (head == NULL || head->next == NULL){
        return head ;
    }

    node* chotahead = reverse1 (head->next) ;

    head -> next -> next = head ;
    head -> next = NULL ; 

    return chotahead ;
}

node* reverselinkedlist (node* head) {

    return reverse1 (head) ;
}


//Q2. MIDDLE OF LL ( TC = O(N) )

//approach 1
int getlength (node* head) {

    int len = 0 ;
    while (head != NULL){
        len++ ;
        head = head->next ;
    }
    return len ;
}

node* fingmiddlenode (node* head) {

    int len = getlength(head) ;
    int ans = (len/2) ;

    node* temp = head ;
    int cnt = 0 ;
    while (cnt < ans){
        temp = temp->next ;
        cnt++ ;
    }
    return temp;
}


//approach 2  (TC = O(N) , SC = O(1) )
node* getmiddle(node* head){

    if (head == NULL  ||  head->next=NULL){
        return head ;
    }

    // 2 nodes
    else if (head->next->next == NULL){
        return head -> next ;
    }

    node* slow = head ;
    node* fast = head->next ;

    while(fast != NULL){
        fast = fast->next ;
        if (fast != NULL){
            fast = fast -> next ;
        }
        slow = slow->next ;
    }
    return slow ;
}



node* findmiddlenode (node* head) {

    return getmiddle(head) ;
}