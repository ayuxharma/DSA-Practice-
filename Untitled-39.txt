//L23

#include <iostream>
using namespace std ;

// column btana is mandatory
bool isPresent (int arr[][3] , int target , int row , int col) {
    
        for (int row=0 ;  row<3 ;  row++) {
          for (int col=0 ; col<3 ; col++) {
            if (arr[row][col]== target) {
                return 1 ;
            }
            else {
    return 0 ;
}
        }
}


// to print col wise sum
void printSum (int arr[][3] , int row , int col) {
    for (int col=0 ; col<3 ; col++) {
        int sum=0 ;
        for (int row=0 ; row<3 ; row++) {
            sum += arr[row][col] ;
        }
        cout << sum ;
    }

cout << endl;
}


// to print row wise sum
void printSum (int arr[][3] , int row , int col) {
    for (int row=0 ; row<3 ; row++) {
        int sum=0 ;
        for (int col=0 ; col<3 ; col++) {
            sum += arr[row][col] ;
        }
        cout << sum ;
    }

cout << endl;
}


int largestRowSum (int arr[][3] , int row , int col) {

    int maxi = INT_MIN ;
    int rowIndex = -1 ;

    for (int row=0 ; row<3 ; row++) {
        int sum=0 ;
        for (int col=0 ; col<3 ; col++) {
            sum += arr[row][col] ;
        }
        if (sum > maxi) {
            maxi = sum ;
            rowIndex = row ;
        }
}
cout << "The maximum sum is " << maxi << endl;
return rowIndex ;
}



int main () {

    // create 2D array
    int arr[3][3] = /*{1,2,3,4,5,6,7,8,9,10,11,12}*/;
   //  int arr[3][4] = { {1,11,111,1111} , {2,22,222,2222} , {3,33,333,3333} , {4,44,444,4444}}
   
     cout << "Enter the elements " << endl;
    //taking input --> row wise ( kyunki pehla loop row k liye h )
    for (int row=0 ;  row<3 ;  row++) {
        for (int column=0 ; column<3 ; column++) {
            cin >> arr[row][column] ;
        }
    }

    //print
    for (int  row=0 ;  row<3 ;  row++) {
        for (int column=0 ; column<3 ; column++) {
            cout << arr[row][column] << " " ;
        }
        cout << endl;
    }

    cout << "Enter the element to search " << endl;
    int target ;
    cin >> target ;

    if (isPresent(arr , target , 3 , 3)) {
        cout << "Element found " << endl;
    }
    else {
        cout << "Not found " << endl;
    }

    printSum(arr , 3 , 3) ;

    cout << "Max row is at index " << largestRowSum (arr,3,3) << endl;

    return 0;
}


//Q. PRINT LIKE A WAVE

vector <int> wavePrint (vector<vector<int>> arr , int nRows , int mCols)
{

    vector <int> ans ;

    for (int col=0 ; col < mCols ; col++) {

        if (col & 1) {
            //odd index---> bottom to top

            for (int row = nRows-1 ; row>=0 ; row--) {
                //cout << arr[row][col] << " " ;
                ans.push_back(arr[row][col]) ;
            }
        }
        else {
            // 0 or even index--> top to bottom
            for (int row=0 ; row < nRows ; row++) {
                //cout << arr[row][col] << " " ;
                ans.push_back(arr[row][col]) ;
            }
        }
        return ans ;
    }
}

//Q. SPIRAL PRINT 

vector<int> spiralOrder (vector<vector<int>>&matrix) {

    vector <int> ans;
    int row = matrix.size() ;
    int col = matrix[0].size() ;

    int count = 0;
    int total = row*col ;

    //index initialization
    int startingRow = 0;
    int startingCol = 0;
    int endingRow = 0;
    int endingCol =0;

    while (count < total) {

        //print starting row
        for (int index = startingCol ; count < total && index < endingCol ; index++) {
            ans.push_back(matrix[startingRow][index]) ;
             count ++ ;
        }
        startingRow ++ ;

        //print ending column
        for (int index = startingRow ; count < total && index < endingRow ; index++) {
            ans.push_back(matrix[index][endingCol]) ;
                     count ++ ;
        }
        ending col -- ;
    
        //print ending row
        for (int index = endingCol ; count < total && index >= startingCol ; index--) {
            ans.push_back(matrix[endingRow][index]) ;
                     count ++ ;
        }
        endingRow -- ;

        //print starting column
        for (int index=endingRow ; index >= startingRow ; index--) {
            ans.push_back(matrix[index][startingCol]) ;
            count ++ ;
            }
        startingCol ++ ;
 }
}


//BINARY SEARCH IN 2D ARRAY
//Q. SEARCH A 2D MATRIX

bool searchMatrix(vector<vector<int>>&matrix , int target) {

    int row = matrix.size() ;
    int col = matrix[0].size();

    int start = 0;
    int end = row*col-1 ;

    int mid = start + (end-start)/2 ;

    while(start<=end) {

       int element = matrix[mid/col][mid%col] ;

       if (element == target) {
        return 1;
       }

       if (element < target) {
        start = mid + 1 ;
       }
       else {
        end = end - 1 ;
       }
    }

    return 0;
}


//Q. SEARCH A 2D MATRIX (level 2)

bool searchMatrix(vector<vector<int>>&matrix , int target) {
       
       int row = matrix.size() ;
       int col = matrix[0].size() ;

       int rowIndex = 0 ;
       int colIndex = col-1 ;

       while (rowIndex < row && colIndex >= 0) {
        int element = matrix[rowIndex][colIndex] ;

        if (element == target) {
            return 1;
        }
        if (element < target) {
            rowIndex ++ ;
        }
        else {
            colIndex -- ;
        }
       }
       return 0;
}