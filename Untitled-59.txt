//L54
//(STACKS)


// via STL

/* #include <iostream>
#include <stack>
using namespace std ;

int main (){

    //creation
    stack<int>s ;

    //push operation
    s.push(2) ;
    s.push(3) ;

    //pop
    s.pop() ;

    cout << "printing top element " << s.top() << endl;


    if(s.empty()){
        cout << "empty" ;
    }
    else {
        cout << "not empty " ;
    }
    
    cout << endl;

    cout << "size is " << s.size() ;

    return 0 ;
} */



// via ourselfs
/* #include <iostream>
#include <stack>
using namespace std ;

class stack {
    //properties
    int * arr ;
    int top ;
    int size ;

    //behaviour
    stack(int size){
        this->size = size ;
        arr = new int(size) ;
        top = -1 ;
    }

    void push (int element){
        if(size-top > 1){
            top++ ;
            arr[top] ;
        }
        else {
            cout << "stack overflow" << endl;
        }
    }

    void pop () {
        if (top >= 0){
            top-- ;
        }
        else {
            cout << "stack underflow " << endl;
        }
    }

    int peek () {
        if (top>=0){
        return arr[top] ;
        }
        else {
            cout << "stack is empty " << endl;
        }
    }

    bool isempty () {
        if (top== -1){
            return true ;
        }
        else{
            return false ;
        }
    }
};

int main () {

    stack st(5) ;

    st.push(22);
    st.push(43);
    st.push(44);

    cout << st.peek() << endl; 

    st.pop() ;

    cout << st.peek() << endl;


    return 0 ;
} */



//Q.)   2 stacks in an array

class twostack {
int* arr ;
int top1 ;
int top2 ;
int size ;

//initialize
twostack(int s){
    this->size = s ;

    top1 = -1 ;
    top2 = s ;

    arr = new int(s) ;

    //push in stack 1 
    void push1 (int num){

        //atleast 1 empty space
        if(top2 - top1 > 1){
            top1++;
            arr[top1] = num ;
        }
        else {
            cout << "stack overflow "
        } 
    }

     //push in stack 2 
    void push2 (int num){

        //atleast 1 empty space
        if(top2 - top1 > 1){
            top2--;
            arr[top2] = num ;
        }
    }

    //pop from stack 1 
    int pop1 () {
        if(top1 >= 0){
            int ans = arr[top1] ;
            top1-- ;
            return ans ;
        }
    }

    //pop from stack 2
    int pop2 () {
        if(top2 >= 0){
            int ans = arr[top2] ;
            top2++ ;
            return ans ;
        }
        else {
            return -1 ;
        }
    }

}

};