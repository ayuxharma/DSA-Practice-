//L52

void insertattail(node* &head , node* &tail , int d){
    node* newnode = new node(d) ;
    if (head==NULL){
        head = newnode ;
        tail = newnode ;
        return ;
    }
    else {
        tail->next = newnode ;
        tail = newnode ;
    }
}



node* copylist(node* node){

    //s1: create a clone list
    node* clonehead = NULL ;
    node* clonetail = NULL ;
    
    node* temp = head ;

    while(temp != NULL){
        insertattail(clonehead , clonetail , temp->data) ;
        temp = temp->next ;
    }

    //s2: create a map
    unordered_map <node* , node*> oldtonew ;

    node* originalnode = head ;
    node* clonenode = clonehead ;
    while (originalnode != NULL){
        oldtonew[originalnode] = clonenode ;
        originalnode = originalnode->next ;
        clonenode = clonenode->next ;
    }
 
    originalnode = head ;
    clonenode = clonehead ;

    while(originalnode != NULL){
        clonenode->random = oldtonew[priginalnode->random] ;
        originalnode = originalnode->next ;
        clonenode = clonenode->next ;
    }

    return clonehead ;
}



//APPROCH-2 (better SC )

void insertattail(node* &head , node* &tail , int d){
    node* newnode = new node(d) ;
    if (head==NULL){
        head = newnode ;
        tail = newnode ;
        return ;
    }
    else {
        tail->next = newnode ;
        tail = newnode ;
    }
}

node* copylist (node* head){

    //s1: create a clone node
    node* clonehead = NULL ;
    node* clonetail = NULL ;

    node* temp = head ;

    while(temp!=NULL){
        insertattail (clonehead , clonetail , temp->data) ;
        temp = temp->next ;
    }

    //s2: clonenodes add in between original list
    node* originalnode = head ;
    node* clonenode = clonehead ;

    while(orginalnode != NULL  && clonenode != NULL){
        node* next = originalnode->next ;
        originalnode->next = clonenode ;
        originalnode = next ;

        next = clonenode->next ;
        clonenode->next = originalnode ;
        clonenode = next ;
    }

    //s3: random pointer copy
    temp = head ;

    while(temp != NULL){

        if(temp=>next != NULL){
            if(temp->random != NULL){

            temp->next->random = temp->random->next ;
        }
            else {
                temp->next = temp->random ;
            }
        }
        temp = temp->next->next ;  
    }

    //s4: revert changes done in step 2
    originalnode = head ;
    clonenode = clonehead ;

    while (originalnode != NULL  && clonenode != NULL){

        originalnode->next = clonenode->next ;
        originalnode = originalnode->next ;

        if (originalnode != NULL){
        clonenode->next = originalnode->next ;
        clonelnode = clonenode->next ;
        }
    }

    //s5: return ans ;
    return clonehead ;
}
