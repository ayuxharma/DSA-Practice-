//L50

//approch 1 


bool checkPalindrome (vector<int> arr){

    int n = arr.size() ;
    int s=0 ;
    int e= n-1 ;

    while(s<=e){

        if(arr[s] != arr[e]){
            return 0;
        }
        s++ ;
        e-- ;
    }
    return 1 ;
}

bool isPalindrome (node* head){

    vector<int> arr ;

    node* temp = head ;

    while(temp != NULL){
        arr.push_back(temp->data);
        temp = temp->next ;
    }

    return checkPalindrome(arr) ;
}





//approch 2

node* getMid (node* head){
    node* slow = head ;
    node* fast = head->next ;

    while(fast!=NULL && fast->next!=NULL){
        fast = fast->next->next ;
        slow = slow->next ;
    }
    return slow ;
}



node* reverse(node*head){
    node* curr = head ;
    node* prev = NULL ;
    node* next = NULL ;

    while(curr != NULL){
        next = curr->next ;
        curr->next = prev ;
        prev = curr ;
        curr = next ;
    }
    return prev ;
}



bool isPlaindrome (node* head){

    if(head->next == NULL){
        return true ;
    }

    //get middle
    node* middle = getMid(head) ;

    //reverse after middle
    node* temp = middle->next ;

    middle->next = reverse(temp) ;


    //compare both halves
    node* head1 = head ;
    node* head2 = middle->next ;

while(head2!=NULL){

if(head1->data != head2->data){
    return false ;
}
head1 = head1->next ;
head2 = head2->next ;
}

//s4= repeat s2
temp = middle->next ;
middle->next = reverse(temp) ;

return true ;

}